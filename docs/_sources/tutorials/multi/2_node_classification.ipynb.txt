{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "\n# Single Machine Multi-GPU Minibatch Node Classification\n\nIn this tutorial, you will learn how to use multiple GPUs in training a\ngraph neural network (GNN) for node classification.\n\nThis tutorial assumes that you have read the [Stochastic GNN Training for Node\nClassification in DGL](../../notebooks/stochastic_training/node_classification.ipynb)_.\nIt also assumes that you know the basics of training general\nmodels with multi-GPU with ``DistributedDataParallel``.\n\n<div class=\"alert alert-info\"><h4>Note</h4><p>See [this tutorial](https://pytorch.org/tutorials/intermediate/ddp_tutorial.html)_\n   from PyTorch for general multi-GPU training with ``DistributedDataParallel``.  Also,\n   see the first section of :doc:`the multi-GPU graph classification\n   tutorial <1_graph_classification>`\n   for an overview of using ``DistributedDataParallel`` with DGL.</p></div>\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Importing Packages\n\nWe use ``torch.distributed`` to initialize a distributed training context\nand ``torch.multiprocessing`` to spawn multiple processes for each GPU.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "import os\n\nos.environ[\"DGLBACKEND\"] = \"pytorch\"\nimport time\n\nimport dgl.graphbolt as gb\nimport dgl.nn as dglnn\nimport torch\nimport torch.distributed as dist\nimport torch.multiprocessing as mp\nimport torch.nn as nn\nimport torch.nn.functional as F\nimport torchmetrics.functional as MF\nfrom torch.distributed.algorithms.join import Join\nfrom torch.nn.parallel import DistributedDataParallel as DDP\nfrom tqdm.auto import tqdm"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Defining Model\n\nThe model will be again identical to [Stochastic GNN Training for Node\nClassification in DGL](../../notebooks/stochastic_training/node_classification.ipynb)_.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "class SAGE(nn.Module):\n    def __init__(self, in_size, hidden_size, out_size):\n        super().__init__()\n        self.layers = nn.ModuleList()\n        # Three-layer GraphSAGE-mean.\n        self.layers.append(dglnn.SAGEConv(in_size, hidden_size, \"mean\"))\n        self.layers.append(dglnn.SAGEConv(hidden_size, hidden_size, \"mean\"))\n        self.layers.append(dglnn.SAGEConv(hidden_size, out_size, \"mean\"))\n        self.dropout = nn.Dropout(0.5)\n        self.hidden_size = hidden_size\n        self.out_size = out_size\n        # Set the dtype for the layers manually.\n        self.float()\n\n    def forward(self, blocks, x):\n        hidden_x = x\n        for layer_idx, (layer, block) in enumerate(zip(self.layers, blocks)):\n            hidden_x = layer(block, hidden_x)\n            is_last_layer = layer_idx == len(self.layers) - 1\n            if not is_last_layer:\n                hidden_x = F.relu(hidden_x)\n                hidden_x = self.dropout(hidden_x)\n        return hidden_x"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Mini-batch Data Loading\n\nThe major difference from the previous tutorial is that we will use\n``DistributedItemSampler`` instead of ``ItemSampler`` to sample mini-batches\nof nodes.  ``DistributedItemSampler`` is a distributed version of\n``ItemSampler`` that works with ``DistributedDataParallel``.  It is\nimplemented as a wrapper around ``ItemSampler`` and will sample the same\nminibatch on all replicas.  It also supports dropping the last non-full\nminibatch to avoid the need for padding.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def create_dataloader(\n    graph,\n    features,\n    itemset,\n    device,\n    is_train,\n):\n    datapipe = gb.DistributedItemSampler(\n        item_set=itemset,\n        batch_size=1024,\n        drop_last=is_train,\n        shuffle=is_train,\n        drop_uneven_inputs=is_train,\n    )\n    datapipe = datapipe.copy_to(device)\n    # Now that we have moved to device, sample_neighbor and fetch_feature steps\n    # will be executed on GPUs.\n    datapipe = datapipe.sample_neighbor(graph, [10, 10, 10])\n    datapipe = datapipe.fetch_feature(features, node_feature_keys=[\"feat\"])\n    return gb.DataLoader(datapipe)\n\n\ndef weighted_reduce(tensor, weight, dst=0):\n    ########################################################################\n    # (HIGHLIGHT) Collect accuracy and loss values from sub-processes and\n    # obtain overall average values.\n    #\n    # `torch.distributed.reduce` is used to reduce tensors from all the\n    # sub-processes to a specified process, ReduceOp.SUM is used by default.\n    #\n    # Because the GPUs may have differing numbers of processed items, we\n    # perform a weighted mean to calculate the exact loss and accuracy.\n    ########################################################################\n    dist.reduce(tensor=tensor, dst=dst)\n    weight = torch.tensor(weight, device=tensor.device)\n    dist.reduce(tensor=weight, dst=dst)\n    return tensor / weight"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Evaluation Loop\n\nThe evaluation loop is almost identical to the previous tutorial.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "@torch.no_grad()\ndef evaluate(rank, model, graph, features, itemset, num_classes, device):\n    model.eval()\n    y = []\n    y_hats = []\n    dataloader = create_dataloader(\n        graph,\n        features,\n        itemset,\n        device,\n        is_train=False,\n    )\n\n    for data in tqdm(dataloader) if rank == 0 else dataloader:\n        blocks = data.blocks\n        x = data.node_features[\"feat\"]\n        y.append(data.labels)\n        y_hats.append(model.module(blocks, x))\n\n    res = MF.accuracy(\n        torch.cat(y_hats),\n        torch.cat(y),\n        task=\"multiclass\",\n        num_classes=num_classes,\n    )\n\n    return res.to(device), sum(y_i.size(0) for y_i in y)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Training Loop\n\nThe training loop is also almost identical to the previous tutorial except\nthat we use Join Context Manager to solve the uneven input problem. The\nmechanics of Distributed Data Parallel (DDP) training in PyTorch requires\nthe number of inputs are the same for all ranks, otherwise the program may\nerror or hang. To solve it, PyTorch provides Join Context Manager. Please\nrefer to [this tutorial](https://pytorch.org/tutorials/advanced/generic_join.html)_\nfor detailed information.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def train(\n    rank,\n    graph,\n    features,\n    train_set,\n    valid_set,\n    num_classes,\n    model,\n    device,\n):\n    optimizer = torch.optim.Adam(model.parameters(), lr=0.01)\n    # Create training data loader.\n    dataloader = create_dataloader(\n        graph,\n        features,\n        train_set,\n        device,\n        is_train=True,\n    )\n\n    for epoch in range(5):\n        epoch_start = time.time()\n\n        model.train()\n        total_loss = torch.tensor(0, dtype=torch.float, device=device)\n        num_train_items = 0\n        with Join([model]):\n            for data in tqdm(dataloader) if rank == 0 else dataloader:\n                # The input features are from the source nodes in the first\n                # layer's computation graph.\n                x = data.node_features[\"feat\"]\n\n                # The ground truth labels are from the destination nodes\n                # in the last layer's computation graph.\n                y = data.labels\n\n                blocks = data.blocks\n\n                y_hat = model(blocks, x)\n\n                # Compute loss.\n                loss = F.cross_entropy(y_hat, y)\n\n                optimizer.zero_grad()\n                loss.backward()\n                optimizer.step()\n\n                total_loss += loss.detach() * y.size(0)\n                num_train_items += y.size(0)\n\n        # Evaluate the model.\n        if rank == 0:\n            print(\"Validating...\")\n        acc, num_val_items = evaluate(\n            rank,\n            model,\n            graph,\n            features,\n            valid_set,\n            num_classes,\n            device,\n        )\n        total_loss = weighted_reduce(total_loss, num_train_items)\n        acc = weighted_reduce(acc * num_val_items, num_val_items)\n\n        # We synchronize before measuring the epoch time.\n        torch.cuda.synchronize()\n        epoch_end = time.time()\n        if rank == 0:\n            print(\n                f\"Epoch {epoch:05d} | \"\n                f\"Average Loss {total_loss.item():.4f} | \"\n                f\"Accuracy {acc.item():.4f} | \"\n                f\"Time {epoch_end - epoch_start:.4f}\"\n            )"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Defining Traning and Evaluation Procedures\n\nThe following code defines the main function for each process. It is\nsimilar to the previous tutorial except that we need to initialize a\ndistributed training context with ``torch.distributed`` and wrap the model\nwith ``torch.nn.parallel.DistributedDataParallel``.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def run(rank, world_size, devices, dataset):\n    # Set up multiprocessing environment.\n    device = devices[rank]\n    torch.cuda.set_device(device)\n    dist.init_process_group(\n        backend=\"nccl\",  # Use NCCL backend for distributed GPU training\n        init_method=\"tcp://127.0.0.1:12345\",\n        world_size=world_size,\n        rank=rank,\n    )\n\n    # Pin the graph and features in-place to enable GPU access.\n    graph = dataset.graph.pin_memory_()\n    features = dataset.feature.pin_memory_()\n    train_set = dataset.tasks[0].train_set\n    valid_set = dataset.tasks[0].validation_set\n    num_classes = dataset.tasks[0].metadata[\"num_classes\"]\n\n    in_size = features.size(\"node\", None, \"feat\")[0]\n    hidden_size = 256\n    out_size = num_classes\n\n    # Create GraphSAGE model. It should be copied onto a GPU as a replica.\n    model = SAGE(in_size, hidden_size, out_size).to(device)\n    model = DDP(model)\n\n    # Model training.\n    if rank == 0:\n        print(\"Training...\")\n    train(\n        rank,\n        graph,\n        features,\n        train_set,\n        valid_set,\n        num_classes,\n        model,\n        device,\n    )\n\n    # Test the model.\n    if rank == 0:\n        print(\"Testing...\")\n    test_set = dataset.tasks[0].test_set\n    test_acc, num_test_items = evaluate(\n        rank,\n        model,\n        graph,\n        features,\n        itemset=test_set,\n        num_classes=num_classes,\n        device=device,\n    )\n    test_acc = weighted_reduce(test_acc * num_test_items, num_test_items)\n\n    if rank == 0:\n        print(f\"Test Accuracy {test_acc.item():.4f}\")"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "## Spawning Trainer Processes\n\nThe following code spawns a process for each GPU and calls the ``run``\nfunction defined above.\n\n\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "collapsed": false
      },
      "outputs": [],
      "source": [
        "def main():\n    if not torch.cuda.is_available():\n        print(\"No GPU found!\")\n        return\n\n    devices = [\n        torch.device(f\"cuda:{i}\") for i in range(torch.cuda.device_count())\n    ]\n    world_size = len(devices)\n\n    print(f\"Training with {world_size} gpus.\")\n\n    # Load and preprocess dataset.\n    dataset = gb.BuiltinDataset(\"ogbn-arxiv\").load()\n\n    # Thread limiting to avoid resource competition.\n    os.environ[\"OMP_NUM_THREADS\"] = str(mp.cpu_count() // 2 // world_size)\n\n    mp.set_sharing_strategy(\"file_system\")\n    mp.spawn(\n        run,\n        args=(world_size, devices, dataset),\n        nprocs=world_size,\n        join=True,\n    )\n\n\nif __name__ == \"__main__\":\n    main()"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.14"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}