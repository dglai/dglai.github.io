<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.5.2">Jekyll</generator><link href="https://www.dgl.ai/feed.xml" rel="self" type="application/atom+xml" /><link href="https://www.dgl.ai/" rel="alternate" type="text/html" /><updated>2022-04-18T15:16:36+00:00</updated><id>https://www.dgl.ai/feed.xml</id><title type="html">Deep Graph Library</title><subtitle>Easy Deep Learning on Graphs</subtitle><entry><title type="html">April 2022 Update Note</title><link href="https://www.dgl.ai/release/2022/04/18/release.html" rel="alternate" type="text/html" title="April 2022 Update Note" /><published>2022-04-18T00:00:00+00:00</published><updated>2022-04-18T00:00:00+00:00</updated><id>https://www.dgl.ai/release/2022/04/18/release</id><content type="html" xml:base="https://www.dgl.ai/release/2022/04/18/release.html">&lt;h2 id=&quot;grouped-reversible-residual-connection-for-gnns&quot;&gt;Grouped Reversible Residual Connection for GNNs&lt;/h2&gt;

&lt;p&gt;We added a new module &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupRevRes&lt;/code&gt; introduced in &lt;a href=&quot;https://arxiv.org/abs/2106.07476&quot;&gt;Training Graph Neural Networks with 1000 Layers&lt;/a&gt;. It can wrap any GNN module with grouped, reversible and residual connection (example code below).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GNNLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dropout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;nb&quot;&gt;super&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GNNLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# Use BatchNorm and dropout to prevent gradient vanishing&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# In particular if you use a large number of GNN layers&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BatchNorm1d&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dropout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# some graph&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;reversible_conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GroupRevRes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GNNLayer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;32&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;//&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# 4 groups&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reversible_conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# forward&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Developer Recommendation:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;GroupRevRes&lt;/code&gt; module is reversible, meaning the backward propagation does not require storing forward activations. It can significantly reduce memory usage of GNNs, making it possible to train a very deep GNN with up to 1000 layers on a single commodity GPU.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;laplacian-positional-encoding&quot;&gt;Laplacian Positional Encoding&lt;/h2&gt;

&lt;p&gt;We added a new data transform module &lt;code class=&quot;highlighter-rouge&quot;&gt;LaplacianPE&lt;/code&gt; first introduced in &lt;a href=&quot;https://arxiv.org/abs/2003.00982&quot;&gt;Benchmarking Graph Neural Networks&lt;/a&gt;. It computes Laplacian positional encoding for a graph. Besides data transform module, we also provide a functional API. See the example of usage below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# data transform&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoraGraphDataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transforms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;LaplacianPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feat_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# positional encodings will be generated as an ndata&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# functional API&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;laplacian_pe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Developer Recommendation:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;Laplacian positional encoding improves the expressive power of GNNs by using k-smallest non-trivial Laplacian eigenvectors as additional node features.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;random-walk-positional-encoding&quot;&gt;Random Walk Positional Encoding&lt;/h2&gt;

&lt;p&gt;We added a new data transform module &lt;code class=&quot;highlighter-rouge&quot;&gt;RandomWalkPE&lt;/code&gt; introduced in &lt;a href=&quot;https://arxiv.org/abs/2110.07875&quot;&gt;Graph Neural Networks with Learnable Structural and Positional Representations&lt;/a&gt;. It computes random-walk-based positional encoding for a graph.  Besides data transform module, we also provide a functional API. See the example of usage below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# data transform&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoraGraphDataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transforms&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;RandomWalkPE&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;feat_name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# positional encodings will be generated automatically&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'PE'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Functional API&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pe&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random_walk_pe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c&quot;&gt;# functional API&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Developer Recommendation:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;Random walk positional encoding improves the expressive power of GNNs by using the landing probabilities of a node to itself in 1, 2, …, K steps as additional node features.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;graphsaint-samplers&quot;&gt;GraphSAINT Samplers&lt;/h2&gt;

&lt;p&gt;We added a new sampler &lt;code class=&quot;highlighter-rouge&quot;&gt;SAINTSampler&lt;/code&gt; introduced in &lt;a href=&quot;https://arxiv.org/abs/1907.04931v4&quot;&gt;GraphSAINT: Graph Sampling Based Inductive Learning Method&lt;/a&gt;. &lt;code class=&quot;highlighter-rouge&quot;&gt;SAINTSampler&lt;/code&gt; provides three strategies to extract induced subgraphs from a graph — by randomly selected node sets, randomly selected edge sets or nodes reached by random walks. See an example of usage below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl.dataloading&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAINTSampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;SAINTSampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'node'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                      &lt;span class=&quot;c&quot;&gt;# Can be 'node', 'edge' or 'walk'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;budget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;200&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefetch_ndata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'feat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'label'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# optionally, specify data to prefetch&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;data_index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# 1000 mini-batches&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoraGraphDataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data_index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sg&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataloader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Developer Recommendation:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;GraphSAINT is one of the state-of-the-art sampling methods in the family of subgraph sampling. Compared with neighbor sampling (or node-wise sampling), subgraph sampling avoids the issue of exponential neighborhood expansion, thus saving data transmission cost and enabling mini-batch training of deeper GNNs.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;en-equivariant-convolutional-layer&quot;&gt;E(n) Equivariant Convolutional Layer&lt;/h2&gt;

&lt;p&gt;We added a new GNN module &lt;code class=&quot;highlighter-rouge&quot;&gt;EGNNConv&lt;/code&gt; introduced in &lt;a href=&quot;https://arxiv.org/abs/2102.09844v3&quot;&gt;E(n) Equivariant Graph Neural Networks&lt;/a&gt;. It performs equivariant transformations on node embeddings and coordinate embeddings. See an example of usage below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# some graph&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# node features&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# node coordinates&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# edge features&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EGNNConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;h&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Developer Recommendation:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;GNNs with the capability of equivariant transformations have wide application in real-world structure data that have coordinates (e.g., molecules, point clouds, etc.). EGNN simplified previous attempts and proposed a design that is equivariant to rotations, translations, reflections and permutations on N-dimensional coordinates while considering both node features and node coordinates.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;principal-neighbourhood-aggregation-layer&quot;&gt;Principal Neighbourhood Aggregation Layer&lt;/h2&gt;

&lt;p&gt;We added a new GNN module &lt;code class=&quot;highlighter-rouge&quot;&gt;PNAConv&lt;/code&gt; introduced in &lt;a href=&quot;https://arxiv.org/abs/2004.05718&quot;&gt;Principal Neighbourhood Aggregation for Graph Nets&lt;/a&gt;. The code below shows an example of usage:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# some graph&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;randn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# node features&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;PNAConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;aggregators&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'mean'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'max'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'sum'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;scalers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'identity'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'amplification'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
                      &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;2.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;h&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;em&gt;Developer Recommendation:&lt;/em&gt;&lt;/strong&gt; &lt;em&gt;Principal Neighbourhood Aggregation (PNA) improves the expressive power of a GNN by combining multiple aggregation functions with degree-scalars, thus making it a state-of-the-art baseline for many graph classification tasks.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;survey&quot;&gt;Survey&lt;/h2&gt;

&lt;p&gt;If there are papers for which you want to have DGL implementations or you have other feedback and suggestions, you could fill in &lt;a href=&quot;https://forms.gle/tgKXFuUiGo9PeYBeA&quot;&gt;this survey&lt;/a&gt;.&lt;/p&gt;</content><author><name>DGLTeam</name></author><category term="release" /><category term="release" /><summary type="html">Grouped Reversible Residual Connection for GNNs</summary></entry><entry><title type="html">v0.8 Release Highlights</title><link href="https://www.dgl.ai/release/2022/03/01/release.html" rel="alternate" type="text/html" title="v0.8 Release Highlights" /><published>2022-03-01T00:00:00+00:00</published><updated>2022-03-01T00:00:00+00:00</updated><id>https://www.dgl.ai/release/2022/03/01/release</id><content type="html" xml:base="https://www.dgl.ai/release/2022/03/01/release.html">&lt;p&gt;We are excited to announce the release of DGL v0.8, which brings many new
features as well as improvement on system performance. The highlights are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A major update of the mini-batch sampling pipeline, better customizability,
more optimizations; &lt;strong&gt;3.9x&lt;/strong&gt; and &lt;strong&gt;1.5x&lt;/strong&gt; faster for supervised and unsupervised
GraphSAGE on OGBN-Products, with only one line of code change.&lt;/li&gt;
  &lt;li&gt;Significant acceleration and code simplification of popular heterogeneous
graph NN modules (Up to &lt;strong&gt;36x&lt;/strong&gt; for RGCN convolution and &lt;strong&gt;12x&lt;/strong&gt; for HGT
convolution). 11 new off-the-shelf NN modules for building models for link
prediction, heterogeneous graph learning and GNN explanation.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;GNNLens&lt;/strong&gt;: a DGL empowered tool to visualize and understand graph data using
GNN explanation models.&lt;/li&gt;
  &lt;li&gt;New functions to create, transform and augment graph datasets, making it
easier to conduct research on graph contrastive learning or repurposing a
graph for different tasks.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DGL-Go&lt;/strong&gt;: a new GNN model training command line tool that utilizes a simple
interface so that users can quickly apply GNNs to their problems and
orchestrate experiments with state-of-the-art GNN models.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;mini-batch-sampling-pipeline-update&quot;&gt;Mini-batch Sampling Pipeline Update&lt;/h2&gt;

&lt;p&gt;In training Neural Networks, minibatch sampling has been used to both improve
model performance and enable scaling to large datasets.  Mini-batch training in
the context of GNNs on graphs introduces new complexities, which can be broken
down into four main steps:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Extract a subgraph from the original graph.&lt;/li&gt;
  &lt;li&gt;Perform transformations on the subgraph.&lt;/li&gt;
  &lt;li&gt;Fetch the node/edge features of the subgraph.&lt;/li&gt;
  &lt;li&gt;Pass the subgraph and its features as the input to your GNN model and update parameters.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Among them, steps 1-3 are unique to GNNs and are quite costly. In v0.7, we have
released the feature to speedup step 2 by transforming subgraphs on GPU, but
the other two may continue to be the bottleneck. In this release, we further
optimized the &lt;em&gt;entire&lt;/em&gt; pipeline to reach an even better performance. We then
briefly describe our technical solutions behind that.&lt;/p&gt;

&lt;p&gt;To speed up subgraph extraction, we utilized CUDA Unified Virtual Addressing(UVA).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2022-03-01-release/uva.png&quot; alt=&quot;uva&quot; width=&quot;400x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(Image courtesy: &lt;a href=&quot;https://developer.download.nvidia.cn/CUDA/training/cuda_webinars_GPUDirect_uva.pdf&quot;&gt;https://developer.download.nvidia.cn/CUDA/training/cuda_webinars_GPUDirect_uva.pdf&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;CUDA UVA allows users to create in-memory data beyond the size of GPU RAM
capacity while still harnessing GPU kernels for fast computation. Storing the
entire graph structure and its features in UVA enables efficient subgraph
extraction using GPU kernels, which is effective for training large-scale GNNs
[1][2]. In this release, users can turn on the UVA mode by setting the &lt;code class=&quot;highlighter-rouge&quot;&gt;use_uva&lt;/code&gt;
flag in &lt;code class=&quot;highlighter-rouge&quot;&gt;DataLoader&lt;/code&gt;, as shown in the example below:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;                  &lt;span class=&quot;c&quot;&gt;# some DGLGraph data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_nids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# training node IDs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataloading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultiLayerNeighborSampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fanout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataloading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_nids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cuda:0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# perform sampling on GPU 0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_uva&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# turn on UVA optimization&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To speed up feature fetching (step 3), DGL 0.8 supports pre-fetching node/edge
features so that the model computation can happen in parallel with data
movement. Users can specify the features as well as the labels to prefetch in
the sampler object.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;           &lt;span class=&quot;c&quot;&gt;# some DGLGraph data&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_nids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# training node IDs&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataloading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MultiLayerNeighborSampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fanout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefetch_node_feats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'feat'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;   &lt;span class=&quot;c&quot;&gt;# prefetch node feature 'feat'&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;prefetch_labels&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'label'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt;      &lt;span class=&quot;c&quot;&gt;# prefetch node label 'label'&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataloading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DataLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_nids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cuda:0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;c&quot;&gt;# perform sampling on GPU 0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1024&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;use_uva&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;         &lt;span class=&quot;c&quot;&gt;# turn on UVA optimization&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;These optimizations bring significant speedup for both supervised and
unsupervised mini-batch training. We compared it against the original pipeline
of sampling on CPU but training on GPU for training a two-layer GraphSAGE model
on the ogbn-papers100M graph using A100 GPUs. We observed a speedup of 3.9x and
1.5x for supervised and unsupervised GraphSAGE on a single GPU respectively.
The speedup applies to multi-GPU training as well.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;/assets/images/posts/2022-03-01-release/number1.png&quot; alt=&quot;number1&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;/assets/images/posts/2022-03-01-release/number2.png&quot; alt=&quot;number2&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Speedup of Supervised GraphSAGE&lt;/td&gt;
      &lt;td&gt;Speedup of Unsupervised GraphSAGE&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Defining a new sampler in DGL v0.8 is also easier, with only one simple
interface &lt;code class=&quot;highlighter-rouge&quot;&gt;sample&lt;/code&gt; to follow. Optionally, users can specify how to prefetch
features for each sample. For example, the cluster sampler used by Cluster-GCN
can be implemented in just a few lines of code.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ClusterGCNSampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefetch_ndata&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;part_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;metis_partition_assignment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# convert partition assignment to bins of nodes&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;part_sizes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;histogram&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part_ids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;float&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_bins&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;split&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;part_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_sizes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# save the node feature names to be prefetched&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefetch_ndata&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prefetch_ndata&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Sample a subgraph given a list of partition IDs.&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;node_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_bins&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;part_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subgraph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# get an induced subgraph&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# tell which feature to pre-fetch&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set_node_lazy_feature&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefetch_ndata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sg&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;New samplers in v0.8:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.dgl.ai/generated/dgl.dataloading.ClusterGCNSampler.html#dgl.dataloading.ClusterGCNSampler&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.dataloading.ClusterGCNSampler&lt;/code&gt;&lt;/a&gt;: The sampler from &lt;a href=&quot;https://arxiv.org/abs/1905.07953&quot;&gt;Cluster-GCN: An
Efficient Algorithm for Training Deep and Large Graph Convolutional Networks&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.dgl.ai/generated/dgl.dataloading.ShaDowKHopSampler.html#dgl.dataloading.ShaDowKHopSampler&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.dataloading.ShaDowKHopSampler&lt;/code&gt;&lt;/a&gt;: The sampler from &lt;a href=&quot;https://arxiv.org/abs/2012.01380&quot;&gt;Deep Graph Neural Networks with Shallow Subgraph Samplers&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This remarkable improvement would not happen without the help from the community.
We want to thank Xin Yao (@yaox12) and Dominique LaSalle (@nv-dlasalle) from
NVIDIA and David Min (@davidmin7) from UIUC for their contributions.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Further reading:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;User guide chapter for &lt;a href=&quot;https://docs.dgl.ai/guide/minibatch-custom-sampler.html&quot;&gt;customizing graph samplers&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;User guide chapter for &lt;a href=&quot;https://docs.dgl.ai/guide/minibatch-prefetching.html&quot;&gt;writing graph samplers with feature prefetching&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/cluster_gcn&quot;&gt;Example implementation&lt;/a&gt; of ClusterGCN.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;nn-module-update&quot;&gt;NN Module Update&lt;/h2&gt;
&lt;p&gt;Heterogeneous GNNs are known to be both difficult to implement as well as
difficult to optimize. In this release, we have significantly improved the
speed of dgl.nn.RelGraphConv and dgl.nn.HGTConv – two state-of-the-art NN
modules for training on heterogeneous graphs, by sometimes an order of
magnitude compared with various baselines[3]:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;img src=&quot;/assets/images/posts/2022-03-01-release/number3.png&quot; alt=&quot;number3&quot; /&gt;&lt;/th&gt;
      &lt;th&gt;&lt;img src=&quot;/assets/images/posts/2022-03-01-release/number4.png&quot; alt=&quot;number4&quot; /&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Speedup of RGCN convolution&lt;/td&gt;
      &lt;td&gt;Speedup of HGT convolution&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;More importantly, writing an efficient heterogeneous graph convolution is
substantially easier. Here is a minimal implementation of RGCN convolution in
0.8 using the new &lt;a href=&quot;https://docs.dgl.ai/generated/dgl.nn.pytorch.TypedLinear.html#dgl.nn.pytorch.TypedLinear&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;nn.TypedLinear&lt;/code&gt;&lt;/a&gt; module:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;RGCNConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Module&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_etypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# TypedLinear is a new module in 0.8!&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear_r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TypedLinear&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;in_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out_size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;num_etypes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forward&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etype&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'etype'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;etype&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;sum&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'m'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ndata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;linear_r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;src&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'h'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;edges&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'etype'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This release also brings 11 new NN modules covering the most requested ones
from the community. They include but are not limited to:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Commonly used &lt;a href=&quot;https://docs.dgl.ai/api/python/nn-pytorch.html#score-modules-for-link-prediction-and-knowledge-graph-completion&quot;&gt;edge score modules&lt;/a&gt; (e.g., TransE, TransR, etc.) for link
prediction.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://docs.dgl.ai/api/python/nn-pytorch.html#heterogeneous-learning-modules&quot;&gt;Linear projection module and embedding module for heterogeneous graphs&lt;/a&gt;
(&lt;code class=&quot;highlighter-rouge&quot;&gt;nn.HeteroLinear&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.HeteroEmbedding&lt;/code&gt;).&lt;/li&gt;
  &lt;li&gt;The &lt;a href=&quot;https://docs.dgl.ai/generated/dgl.nn.pytorch.explain.GNNExplainer.html#dgl.nn.pytorch.explain.GNNExplainer&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GNNExplainer&lt;/code&gt;&lt;/a&gt; module.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;understand-graph-via-visualisation-and-gnn-based-explanation&quot;&gt;Understand Graph via Visualisation and GNN-based Explanation&lt;/h2&gt;
&lt;p&gt;Understanding graph data using GNN-based explanation model has become an
important research topic. We partnered with the HKUST VisLab team to release
GNNLens, an interactive visualization tool for graph neural networks.&lt;/p&gt;

&lt;p&gt;To install GNNLens, &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install gnnlens&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It provides Python APIs for specifying the data to be visualized. For example,
the following shows how to load DGL’s built-in Cora graph dataset and visualize
it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl.data&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CoraGraphDataset&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;CoraGraphDataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;G&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;gnnlens&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Specify the path to create a new directory for dumping data files.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Writer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'tutorial_graph'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Cora'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cora_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Citeseer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;graph&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;citeseer_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Finish dumping&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;After running the script, you can then launch GNNLens with the following command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;gnnlens --logdir tutorial_graph
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And you will see the webpage in your browser:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2022-03-01-release/gnnlens.png&quot; alt=&quot;gnnlens&quot; width=&quot;800x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;GNNLens is not only capable of visualizing raw graph data, but also designed
for inspecting graph neural networks such as running explanation models to
explain the prediction. Please check out the tutorials in the project README:
&lt;a href=&quot;https://github.com/dmlc/gnnlens2&quot;&gt;https://github.com/dmlc/gnnlens2&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;composable-graph-data-transforms&quot;&gt;Composable Graph Data Transforms&lt;/h2&gt;

&lt;p&gt;Graph data augmentation has become an important component for graph contrastive
learning or structural prediction in general. The new release makes it easier
to compose and apply various graph augmentation and transformation algorithms
to all DGL’s built-in dataset. The new &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.transforms&lt;/code&gt; package follows the
style of the PyTorch Dataset Transforms. Users can specify the transforms to
use with the &lt;code class=&quot;highlighter-rouge&quot;&gt;transform&lt;/code&gt; keyword argument of all DGL datasets:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl.transforms&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;T&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Compose&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AddSelfLoop&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GCNNorm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoraGraphDataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# graph and features will be transformed automatically&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DGL v0.8 provides 16 commonly used data transform APIs. See the &lt;a href=&quot;https://docs.dgl.ai/api/python/transforms.html&quot;&gt;API
doc&lt;/a&gt; for more information.&lt;/p&gt;

&lt;p&gt;Making graph datasets easily accessible for all kinds of research is important. A common scenario is to adapt a dataset for a different task than it was originally designed for (e.g., training a link prediction model on Cora which is originally for node classification). We therefore add two dataset adapters (&lt;a href=&quot;https://docs.dgl.ai/generated/dgl.data.AsNodePredDataset.html#dgl.data.AsNodePredDataset&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.data.AsNodePredDataset&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.dgl.ai/generated/dgl.data.AsLinkPredDataset.html#dgl.data.AsLinkPredDataset&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.data.AsLinkPredDataset&lt;/code&gt;&lt;/a&gt;) for this purpose. We also support generating new train/val/test split and save them for later use:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CoraGraphDataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# make a Cora dataset suitable for link prediction&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# add train/val/test split and negative samples&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AsLinkPredDataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;split_ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;0.8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;neg_ratio&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;one-more-thing&quot;&gt;One more thing&lt;/h2&gt;

&lt;p&gt;As GNN is still a young and blooming domain, we received many “how to start” questions from our users:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;“I’ve heard about GNNs, how to start training a GNN model on my own datasets?”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“I want to learn more about GNNs, how to start experimenting with SOTA baselines?”&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;“I have some new research ideas, how to start building it upon existing GNN models?”&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To make those first steps easier, we developed &lt;strong&gt;DGL-Go&lt;/strong&gt;, a command line tool for
users to quickly access the latest GNN research progress.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2022-03-01-release/dglgo.png&quot; alt=&quot;dglgo&quot; width=&quot;600x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Using DGL-Go is as easy as three steps:&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl configure&lt;/code&gt; to pick the task, dataset and model of your interests.
It generates a configuration file for later use. You could also use &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl
recipe get&lt;/code&gt; to retrieve a configuration file we provided.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl train&lt;/code&gt; to launch training according to the configuration and see
the results.&lt;/li&gt;
  &lt;li&gt;Use &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl export&lt;/code&gt; to generate a &lt;strong&gt;self-contained, reproducible&lt;/strong&gt; Python
script for advanced customization, or try the model on custom data stored in
CSV format.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Install DGL-Go simply by &lt;code class=&quot;highlighter-rouge&quot;&gt;pip install dglgo&lt;/code&gt; and check out the project &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/dglgo&quot;&gt;README&lt;/a&gt; for more details.&lt;/p&gt;

&lt;h2 id=&quot;further-reading&quot;&gt;Further Reading&lt;/h2&gt;
&lt;p&gt;The full &lt;a href=&quot;https://github.com/dmlc/dgl/releases/tag/0.8.0&quot;&gt;release note&lt;/a&gt; of DGL v0.8.&lt;/p&gt;

&lt;h2 id=&quot;reference&quot;&gt;Reference&lt;/h2&gt;
&lt;p&gt;[1] PyTorch-Direct: Enabling GPU Centric Data Access for Very Large Graph Neural Network Training with Irregular Accesses&lt;/p&gt;

&lt;p&gt;[2] TorchQuiver: &lt;a href=&quot;https://github.com/quiver-team/torch-quiver&quot;&gt;https://github.com/quiver-team/torch-quiver&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;[3] We compared our new &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.RelGraphConv&lt;/code&gt; module with multiple existing baselines from DGL and PyG. For DGL v0.7, Baseline#1 uses the old &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.RelGraphConv&lt;/code&gt; module with &lt;code class=&quot;highlighter-rouge&quot;&gt;low_mem=False&lt;/code&gt;; Baseline#2 uses the old &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.RelGraphConv&lt;/code&gt; with &lt;code class=&quot;highlighter-rouge&quot;&gt;low_mem=True&lt;/code&gt;; Baseline#3 uses &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.HeteroGarphConv&lt;/code&gt;. For PyG, Baseline#1 uses &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.RGCNConv&lt;/code&gt; while Baseline#2 uses &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.FastRGCNConv&lt;/code&gt;. All the benchmarks are tested on one NVIDIA T4 GPU card.&lt;/p&gt;</content><author><name>DGLTeam</name></author><category term="release" /><category term="release" /><summary type="html">We are excited to announce the release of DGL v0.8, which brings many new features as well as improvement on system performance. The highlights are:</summary></entry><entry><title type="html">v0.7 Release Highlights</title><link href="https://www.dgl.ai/release/2021/07/26/release.html" rel="alternate" type="text/html" title="v0.7 Release Highlights" /><published>2021-07-26T00:00:00+00:00</published><updated>2021-07-26T00:00:00+00:00</updated><id>https://www.dgl.ai/release/2021/07/26/release</id><content type="html" xml:base="https://www.dgl.ai/release/2021/07/26/release.html">&lt;p&gt;v0.7 brings improvements on the low-level system infrastructure as well as on
the high-level user-facing utilities. Many of
them involve contributions from the user community. We are grateful to see such
a growing trend and welcome more in the future. Here are the notable
updates.&lt;/p&gt;

&lt;h2 id=&quot;gpu-based-neighbor-sampling&quot;&gt;GPU-based Neighbor Sampling&lt;/h2&gt;

&lt;p&gt;We worked with NVIDIA to make DGL support uniform neighbor sampling and MFG
conversion on GPU. This removes the need to move samples from CPU to GPU in
each iteration and at the same time accelerate the sampling step using GPU
acceleration. As a result, experiment for GraphSAGE on the ogbn-product graph
gets a &lt;strong&gt;&amp;gt;10x speedup&lt;/strong&gt; (reduced from 113s to 11s per epoch) on a g3.16x
instance. To enable the feature, create a NodeDataLoader with a GPU graph and
specify the sampling device to be on GPU:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;             &lt;span class=&quot;c&quot;&gt;# create a graph&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cuda:0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# move the graph to GPU&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# create a data loader&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dataloader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dataloading&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NodeDataLoader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                                &lt;span class=&quot;c&quot;&gt;# now accepts graph on GPU&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;train_nid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;torch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;device&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cuda:0'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;    &lt;span class=&quot;c&quot;&gt;# specify the sampling device&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;num_workers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;                    &lt;span class=&quot;c&quot;&gt;# num_workers must be 0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;batch_size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;drop_last&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# training loop&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;input_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_graphs&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dataloader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c&quot;&gt;# the produced sample_graphs are already on GPU&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;train_on&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;input_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output_nodes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sample_graphs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following docs have been updated accordingly:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;A new user guide chapter &lt;a href=&quot;https://docs.dgl.ai/guide/minibatch-gpu-sampling.html&quot;&gt;Using GPU for Neighborhood
Sampling&lt;/a&gt; about when
and how to use this new feature.&lt;/li&gt;
  &lt;li&gt;The API doc of &lt;a href=&quot;https://docs.dgl.ai/api/python/dgl.dataloading.html#dgl.dataloading.pytorch.NodeDataLoader&quot;&gt;NodeDataLoader&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;em&gt;We thank @nv-dlasalle from NVIDIA for contributing the CUDA kernels for
performing neighbor sampling as well as MFG conversion.&lt;/em&gt;&lt;/p&gt;

&lt;h2 id=&quot;improved-cpu-message-passing-kernel&quot;&gt;Improved CPU Message Passing Kernel&lt;/h2&gt;

&lt;p&gt;The core SpMM kernel for GNN message passing on CPU has been re-implemented.
The new kernel performs tiling on CSR matrix and leverages Intel’s LibXSMM for
kernel generation.  Please read the paper
&lt;a href=&quot;https://arxiv.org/abs/2104.06700&quot;&gt;https://arxiv.org/abs/2104.06700&lt;/a&gt; for more
details. The feature is turned on automatically for Xeon CPUs which shows significant
speed boost. &lt;em&gt;We thank @sanchit-misra and Intel for contributing the new CPU kernel.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2021-07-26-release/cpu_kernel.png&quot; alt=&quot;cpu_kernel&quot; width=&quot;600x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;better-nodeembedding-for-multi-gpu-training-and-distributed-training&quot;&gt;Better NodeEmbedding for multi-GPU training and distributed training&lt;/h2&gt;

&lt;p&gt;DGL now utilizes &lt;a href=&quot;https://developer.nvidia.com/nccl&quot;&gt;NCCL&lt;/a&gt; to synchronize the
gradients of sparse node embeddings (&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.nn.NodeEmbedding&lt;/code&gt;) during training. It
is enabled automatically when users specify nccl as the backend for
&lt;code class=&quot;highlighter-rouge&quot;&gt;torch.distributed.init_process_group&lt;/code&gt;. Our experiment shows a &lt;strong&gt;20% speedup&lt;/strong&gt;
(reduced from 47.2s to 39.5s per epoch) on a g4dn.12xlarge (4 T4 GPU) instance
for training RGCN on ogbn-mag graph. &lt;em&gt;We thank the effort from @nv-dlasalle and
NVIDIA.&lt;/em&gt; Distributed node embedding now uses synchronized gradient update,
making the training more stable.&lt;/p&gt;

&lt;h2 id=&quot;dgl-kubernetes-operator&quot;&gt;DGL Kubernetes Operator&lt;/h2&gt;

&lt;p&gt;Qihoo360 built a DGL Operator that makes running graph neural network
distributed or non-distributed training on Kubernetes. Please check out their
repository for usage: &lt;a href=&quot;https://github.com/Qihoo360/dgl-operator&quot;&gt;https://github.com/Qihoo360/dgl-operator&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;other-performance-gains&quot;&gt;Other Performance Gains&lt;/h2&gt;

&lt;p&gt;Apart from the major feature improvement, we have also received helps from
community contributors for fixing performance issues. Notably, DGL’s CPU random
walk sampling is improved by 24x on medium to large size graphs; the memory
consumption of distributed training set splitting drops by ~7x on graphs of
billion scale.&lt;/p&gt;

&lt;h2 id=&quot;more-than-more-models&quot;&gt;More than More Models&lt;/h2&gt;

&lt;p&gt;As usual, the release brings a batch of &lt;strong&gt;19 new model examples&lt;/strong&gt; to the
repository bringing the total number to be &lt;strong&gt;over 90&lt;/strong&gt;. To help users find examples
that fit their needs (e.g. certain topic, datasets), we present a new search
tool on &lt;a href=&quot;https://www.dgl.ai/&quot;&gt;dgl.ai&lt;/a&gt; which supports finding examples by
keywords.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2021-07-26-release/0.7-high.gif&quot; alt=&quot;search&quot; width=&quot;800x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Below are the new models added in v0.7.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Interaction Networks for Learning about Objects, Relations, and Physics&lt;/li&gt;
  &lt;li&gt;Multi-GPU RGAT for OGB-LSC Node Classification&lt;/li&gt;
  &lt;li&gt;Network Embedding with Completely-imbalanced Labels&lt;/li&gt;
  &lt;li&gt;Temporal Graph Networks improved&lt;/li&gt;
  &lt;li&gt;Diffusion Convolutional Recurrent Neural Network&lt;/li&gt;
  &lt;li&gt;Gated Attention Networks for Learning on Large and Spatiotemporal Graphs&lt;/li&gt;
  &lt;li&gt;DeeperGCN&lt;/li&gt;
  &lt;li&gt;Deep Graph Contrastive Representation Learning&lt;/li&gt;
  &lt;li&gt;Graph Neural Networks Inspired by Classical Iterative Algorithms&lt;/li&gt;
  &lt;li&gt;GraphSAINT&lt;/li&gt;
  &lt;li&gt;Label Propagation&lt;/li&gt;
  &lt;li&gt;Combining Label Propagation and Simple Models Out-performs Graph Neural Networks&lt;/li&gt;
  &lt;li&gt;GCNII&lt;/li&gt;
  &lt;li&gt;Latent Dirichlet Allocation on GPU&lt;/li&gt;
  &lt;li&gt;A Heterogeneous Information Network based Cross Domain Insurance Recommendation System for Cold Start Users&lt;/li&gt;
  &lt;li&gt;Five heterogeneous graph models: HetGNN/GTN/HAN/NSHE/MAGNN.  Sparse matrix
multiplication and addition with autograd are also added as a result.&lt;/li&gt;
  &lt;li&gt;Heterogeneous Graph Attention Networks with minibatch sampling&lt;/li&gt;
  &lt;li&gt;Learning Hierarchical Graph Neural Networks for Image Clustering&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tutorials-for-multi-gpu-and-distributed-training&quot;&gt;Tutorials for Multi-GPU and Distributed Training&lt;/h2&gt;

&lt;p&gt;With a growing interest in applying GNNs on large-scale graphs, we see many
questions from our users about how to utilize multi-GPU or multi-machine for
acceleration. In this release, we published two new tutorials about multi-GPU
training for node classification and graph classification, respectively. There
is also a new tutorial about distributed training across multiple machines. All
of them are available at &lt;a href=&quot;https://docs.dgl.ai/&quot;&gt;docs.dgl.ai&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2021-07-26-release/multi-gpu-tut.png&quot; alt=&quot;tutorial&quot; width=&quot;800x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;further-readings&quot;&gt;Further Readings&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Full release note: &lt;a href=&quot;https://github.com/dmlc/dgl/releases/tag/v0.7.0&quot;&gt;https://github.com/dmlc/dgl/releases/tag/v0.7.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>DGLTeam</name></author><category term="release" /><category term="release" /><summary type="html">v0.7 brings improvements on the low-level system infrastructure as well as on the high-level user-facing utilities. Many of them involve contributions from the user community. We are grateful to see such a growing trend and welcome more in the future. Here are the notable updates.</summary></entry><entry><title type="html">v0.6 Release Highlight</title><link href="https://www.dgl.ai/release/2021/02/25/release.html" rel="alternate" type="text/html" title="v0.6 Release Highlight" /><published>2021-02-25T00:00:00+00:00</published><updated>2021-02-25T00:00:00+00:00</updated><id>https://www.dgl.ai/release/2021/02/25/release</id><content type="html" xml:base="https://www.dgl.ai/release/2021/02/25/release.html">&lt;p&gt;The recent DGL 0.6 release is a major update on many aspects of the project
including documentation, APIs, system speed, and scalability. This article
highlights some of the new features and enhancements.&lt;/p&gt;

&lt;h2 id=&quot;a-blitz-introduction-to-dgl-in-120-minutes&quot;&gt;A Blitz Introduction to DGL in 120 minutes&lt;/h2&gt;

&lt;p&gt;The brand new set of tutorials come from our past hands-on tutorials in several
major academic conferences (e.g., KDD’19, KDD’20, WWW’20). They start from an
end-to-end example of using GNNs for node classification, and gradually unveil
the core components in DGL such as DGLGraph, GNN modules, and graph datasets.
The tutorials are now available on &lt;a href=&quot;https://docs.dgl.ai/tutorials/blitz/index.html&quot;&gt;docs.dgl.ai&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2021-02-25-release/blitz-intro.png&quot; alt=&quot;blitz&quot; width=&quot;800x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-gentle-tutorial-on-mini-batch-training-of-gnns&quot;&gt;A Gentle Tutorial on Mini-batch Training of GNNs&lt;/h2&gt;

&lt;p&gt;The scale of real world data can be massive, which demands training GNNs
stochastically by mini-batches. However, unlike images or text corpus where
data samples are independent, stochastic training of GNNs is more complex
because one must handle the dependencies among samples. We observed that
stochastic training is one of the most-asked topics on our discuss forum. In
0.6, we summarize the answers to those common questions in a set of
&lt;a href=&quot;https://docs.dgl.ai/tutorials/large/index.html&quot;&gt;tutorials&lt;/a&gt; on stochastic
training of GNNs, including the insight into neighbor sampling algorithms,
training loops and code snippets in DGL to realize them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://data.dgl.ai/tutorial/img/sampling.gif&quot; alt=&quot;sampling&quot; width=&quot;800x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;more-examples&quot;&gt;More Examples&lt;/h2&gt;

&lt;p&gt;The release includes &lt;strong&gt;13 new examples&lt;/strong&gt;, brings &lt;strong&gt;a total of 72 models&lt;/strong&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;MixHop: Higher-Order Graph Convolutional Architectures via Sparsified Neighborhood Mixing: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/mixhop&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/mixhop&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Self-Attention Graph Pooling: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/sagpool]&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/sagpool&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;GNN-FiLM: Graph Neural Networks with Feature-wise Linear Modulation: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/GNN-FiLM&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/GNN-FiLM&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;TensorFlow implementation of Simplifying Graph Convolutional Networks: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/tensorflow/sgc&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/tensorflow/sgc&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Graph Representation Learning via Hard and Channel-Wise Attention Networks: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/hardgat&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/hardgat&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Graph Random Neural Network for Semi-Supervised Learning on Graphs: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/grand&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/grand&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Hierarchical Graph Pooling with Structure Learning: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/hgp_sl&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/hgp_sl&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Towards Deeper Graph Neural Networks: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/dagnn&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/dagnn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;PointNet: Deep Learning on Point Sets for 3D Classification and Segmentation/PointNet++: Deep Hierarchical Feature Learning on Point Sets in a Metric Space (part segmentation): &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/pointcloud/pointnet&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/pointcloud/pointnet&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Graph Cross Networks with Vertex Infomax Pooling: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/gxn&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/gxn&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Neural Graph Collaborative Filtering: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/NGCF&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/NGCF&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Link Prediction Based on Graph Neural Networks: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/seal&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/seal&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Graph Neural Networks with Convolutional ARMA Filters: &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/arma&quot;&gt;https://github.com/dmlc/dgl/tree/master/examples/pytorch/arma&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples&quot;&gt;official example folder&lt;/a&gt; now indexes the examples by their notable tags such as their targeted tasks and so on.&lt;/p&gt;

&lt;h2 id=&quot;usability-enhancements&quot;&gt;Usability Enhancements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Two new APIs &lt;a href=&quot;https://docs.dgl.ai/generated/dgl.DGLGraph.set_batch_num_nodes.html#dgl.DGLGraph.set_batch_num_nodes&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph.set_batch_num_nodes&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.dgl.ai/generated/dgl.DGLGraph.set_batch_num_edges.html#dgl.DGLGraph.set_batch_num_edges&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph.set_batch_num_edges&lt;/code&gt;&lt;/a&gt; for setting batch information manually, which are useful for transforming a batched graph into another or constructing a new batched graph manually.&lt;/li&gt;
  &lt;li&gt;A new API &lt;a href=&quot;https://docs.dgl.ai/api/python/dgl.dataloading.html#dgl.dataloading.pytorch.GraphDataLoader&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GraphDataLoader&lt;/code&gt;&lt;/a&gt;, a data loader wrapper for graph classification tasks.&lt;/li&gt;
  &lt;li&gt;A new dataset class &lt;a href=&quot;https://docs.dgl.ai/api/python/dgl.data.html#qm9-dataset&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;QM9Dataset&lt;/code&gt;&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;A new namespace &lt;a href=&quot;https://docs.dgl.ai/api/python/nn.functional.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.nn.functional&lt;/code&gt;&lt;/a&gt; for hosting NN related utility functions.&lt;/li&gt;
  &lt;li&gt;DGL now supports training with half precision and is compatible with PyTorch’s automatic mixed precision package. See the &lt;a href=&quot;https://docs.dgl.ai/guide/mixed_precision.html&quot;&gt;user guide chapter&lt;/a&gt; for how to use it.&lt;/li&gt;
  &lt;li&gt;(Experimental) Users can now use DistGraph with heterogeneous graph data. This also applies to &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.sample_neighbors&lt;/code&gt; on DistGraph. In addition, DGL supports distributed graph partitioning on a cluster of machines. See the &lt;a href=&quot;https://docs.dgl.ai/guide/distributed.html&quot;&gt;user guide chapter&lt;/a&gt; for more details.&lt;/li&gt;
  &lt;li&gt;(Experimental) Several new APIs for training sparse embeddings:
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.dgl.ai/api/python/nn.pytorch.html#nodeembedding-module&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.nn.NodeEmbedding&lt;/code&gt;&lt;/a&gt; is a dedicated class for storing trainable node embeddings that can scale to graphs with millions of nodes.&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;https://docs.dgl.ai/api/python/dgl.optim.html#dgl.optim.pytorch.SparseAdagrad&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.optim.SparseAdagrad&lt;/code&gt;&lt;/a&gt; and &lt;a href=&quot;https://docs.dgl.ai/api/python/dgl.optim.html#dgl.optim.pytorch.SparseAdam&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.optim.SparseAdam&lt;/code&gt;&lt;/a&gt; are two optimizers for the NodeEmbedding class.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;system-efficiency-improvements&quot;&gt;System Efficiency Improvements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;With PyTorch backend, DGL will use PyTorch’s native memory management to cache repeated memory allocation and deallocation.&lt;/li&gt;
  &lt;li&gt;A new implementation for &lt;code class=&quot;highlighter-rouge&quot;&gt;nn.RelGraphConv&lt;/code&gt; when &lt;code class=&quot;highlighter-rouge&quot;&gt;low_mem=True&lt;/code&gt; (PyTorch backend). A benchmark on V100 GPU shows it gives a &lt;strong&gt;4.8x&lt;/strong&gt; boost in training speed on AIFB dataset.&lt;/li&gt;
  &lt;li&gt;Faster CPU kernels using AVX512 instructions.&lt;/li&gt;
  &lt;li&gt;Faster GPU kernels on CUDA 11.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;further-readings&quot;&gt;Further Readings&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Full release note: &lt;a href=&quot;https://github.com/dmlc/dgl/releases/tag/v0.6.0&quot;&gt;https://github.com/dmlc/dgl/releases/tag/v0.6.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>DGLTeam</name></author><category term="release" /><category term="release" /><summary type="html">The recent DGL 0.6 release is a major update on many aspects of the project including documentation, APIs, system speed, and scalability. This article highlights some of the new features and enhancements.</summary></entry><entry><title type="html">DGL Empowers Service for Predictions on Connected Datasets with Graph Neural Networks</title><link href="https://www.dgl.ai/news/2020/12/15/neptuneml.html" rel="alternate" type="text/html" title="DGL Empowers Service for Predictions on Connected Datasets with Graph Neural Networks" /><published>2020-12-15T00:00:00+00:00</published><updated>2020-12-15T00:00:00+00:00</updated><id>https://www.dgl.ai/news/2020/12/15/neptuneml</id><content type="html" xml:base="https://www.dgl.ai/news/2020/12/15/neptuneml.html">&lt;p&gt;AWS just announced the availability of &lt;a href=&quot;http://aws.amazon.com/neptune/machine-learning/&quot;&gt;Neptune ML&lt;/a&gt;.
Amazon Neptune is a fast,
reliable, fully managed graph database service that makes it easy to build and
run applications that work with highly connected datasets. Neptune ML is a new
capability that uses graph neural networks (GNNs), a machine learning (ML)
technique purpose-built for graphs, for making easy, fast, and accurate
predictions on graphs. The accuracy of most predictions for graphs increases to
50% with Neptune ML when compared to non-graph methods. Neptune ML uses the
Deep Graph Library (DGL), an open-source library to which AWS contributes that
makes it easy to develop and apply GNN models on graph data. Now, developers
can create, train, and apply ML on Neptune data in hours instead of weeks
without the need to learn new tools and ML technologies.&lt;/p&gt;

&lt;p&gt;We would love to see more commercial vendors build innovation on top of DGL in
the future. For more information about Neptune ML, please visit the &lt;a href=&quot;https://aws.amazon.com/blogs/database/announcing-amazon-neptune-ml-easy-fast-and-accurate-predictions-on-graphs/&quot;&gt;AWS blog&lt;/a&gt;
and &lt;a href=&quot;https://aws.amazon.com/neptune/machine-learning/&quot;&gt;product page&lt;/a&gt;. Watch the
&lt;a href=&quot;https://reinvent.awsevents.com/keynotes/&quot;&gt;re:Invent 2020 Machine Learning Keynote&lt;/a&gt;
by Swami Sivasubramanian for the full announcement.&lt;/p&gt;</content><author><name>DGLTeam</name></author><category term="news" /><category term="news" /><summary type="html">AWS just announced the availability of Neptune ML. Amazon Neptune is a fast, reliable, fully managed graph database service that makes it easy to build and run applications that work with highly connected datasets. Neptune ML is a new capability that uses graph neural networks (GNNs), a machine learning (ML) technique purpose-built for graphs, for making easy, fast, and accurate predictions on graphs. The accuracy of most predictions for graphs increases to 50% with Neptune ML when compared to non-graph methods. Neptune ML uses the Deep Graph Library (DGL), an open-source library to which AWS contributes that makes it easy to develop and apply GNN models on graph data. Now, developers can create, train, and apply ML on Neptune data in hours instead of weeks without the need to learn new tools and ML technologies.</summary></entry><entry><title type="html">v0.5.3 Patch Update</title><link href="https://www.dgl.ai/release/2020/12/04/release.html" rel="alternate" type="text/html" title="v0.5.3 Patch Update" /><published>2020-12-04T00:00:00+00:00</published><updated>2020-12-04T00:00:00+00:00</updated><id>https://www.dgl.ai/release/2020/12/04/release</id><content type="html" xml:base="https://www.dgl.ai/release/2020/12/04/release.html">&lt;p&gt;This is a patch release mainly for supporting CUDA 11.0.  Now DGL supports CUDA 11.0 and PyTorch 1.7 on Linux/Windows/Mac.&lt;/p&gt;

&lt;p&gt;Other fixes include:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Performance fix of graph batching. Affect the &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.batch&lt;/code&gt; API.&lt;/li&gt;
  &lt;li&gt;Speedup on graph readout. Affect &lt;a href=&quot;https://docs.dgl.ai/api/python/dgl.html#batching-and-reading-out-ops&quot;&gt;all APIs&lt;/a&gt; under &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.readout&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Speedup in CPU SpMM with sum reducer.&lt;/li&gt;
  &lt;li&gt;Performance optimization that removes redundant copies between CPU and GPU.&lt;/li&gt;
  &lt;li&gt;Fix &lt;code class=&quot;highlighter-rouge&quot;&gt;segment_reduce()&lt;/code&gt; ignoring tailing 0 segments.&lt;/li&gt;
  &lt;li&gt;Fix a crash bug due to unfound attribute.&lt;/li&gt;
  &lt;li&gt;Performance optimization in COO-CSR conversion.&lt;/li&gt;
  &lt;li&gt;Parallelization in heterogeneous graph format conversion.&lt;/li&gt;
  &lt;li&gt;Fix a bug to enable distributed training of RGCN with CPU.&lt;/li&gt;
  &lt;li&gt;Numerous documentation fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New examples:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;Sparse embedding for GATNE-T for large graphs.&lt;/li&gt;
  &lt;li&gt;LINE.&lt;/li&gt;
  &lt;li&gt;SIGN for OGB.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The Chinese user guide has been released for chapter 1 to 4. Further chapters will be released soon.&lt;/p&gt;

&lt;p&gt;Full release note: &lt;a href=&quot;https://github.com/dmlc/dgl/releases/tag/0.5.3&quot;&gt;https://github.com/dmlc/dgl/releases/tag/0.5.3&lt;/a&gt;&lt;/p&gt;</content><author><name>DGLTeam</name></author><category term="release" /><category term="release" /><summary type="html">This is a patch release mainly for supporting CUDA 11.0. Now DGL supports CUDA 11.0 and PyTorch 1.7 on Linux/Windows/Mac.</summary></entry><entry><title type="html">What is new in DGL v0.5 release?</title><link href="https://www.dgl.ai/release/2020/08/26/release.html" rel="alternate" type="text/html" title="What is new in DGL v0.5 release?" /><published>2020-08-26T00:00:00+00:00</published><updated>2020-08-26T00:00:00+00:00</updated><id>https://www.dgl.ai/release/2020/08/26/release</id><content type="html" xml:base="https://www.dgl.ai/release/2020/08/26/release.html">&lt;p&gt;The recent DGL 0.5 release is a major update on many aspects of the project
including documentation, APIs, system speed and scalability. This article
highlights some of the new features and enhancements.&lt;/p&gt;

&lt;h2 id=&quot;more-docs-fewer-codes&quot;&gt;More docs, fewer codes&lt;/h2&gt;

&lt;p&gt;DGL has been through several releases with numerous new APIs and
features. While the development pace is rapid, DGL’s documentation has
been lagging behind. We have been aware of this issue and finally got a hand on
it in this release. There are two major changes. A new
&lt;a href=&quot;https://docs.dgl.ai/en/0.5.x/guide/index.html&quot;&gt;user guide&lt;/a&gt; with dedicated chapters for the
core concepts of DGL and how they connect with the pipeline of training/testing
GNNs. There are currently seven chapters:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;em&gt;Graph&lt;/em&gt;: The chapter explains the basics about the graph data structure, the
usage of the core &lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph&lt;/code&gt; class, heterogeneous graph and so on.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Message Passing&lt;/em&gt;: The chapter starts from the mathematical definition of the
message passing neural networks and then explains how to express them in DGL.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Building GNN Modules&lt;/em&gt;: The chapter walk-throughs the steps to define GNN
layers/modules in DGL for both homogeneous and heterogeneous graphs.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Graph Data Pipeline&lt;/em&gt;: The chapter explains how the datasets are organized in
DGL and how to create with your own one.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Training Graph Neural Networks&lt;/em&gt;: The chapter provides guidance on training
GNNs in DGL for node, edge and graph prediction tasks.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Stochastic Training on Large Graphs&lt;/em&gt;: The chapter introduces
mini-batch training in the GNN domain and the designated DGL APIs.&lt;/li&gt;
  &lt;li&gt;&lt;em&gt;Distributed Training&lt;/em&gt;: The chapter explains DGL’s components for training
graphs scaling beyond one machine.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Besides the user guide, we have re-worked the API document extensively and
organized them by their namespaces. We also took this chance to prune the set
of API, deprecate rare and redundant APIs and consolidate functionalities into
fewer. For example, the creation of a graph in DGL now only involves &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.graph&lt;/code&gt;
and &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.heterograph&lt;/code&gt; for homogeneous and heterogeneous graphs, respectively.
Another noticeable simplification is that &lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph&lt;/code&gt; is now the only class for
storing graph and feature. It can represent a homogeneous or heterogeneous
graph, a subgraph or a batched graph.&lt;/p&gt;

&lt;h2 id=&quot;more-flexibility-on-dglgraph&quot;&gt;More flexibility on &lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The 0.5 release enables more flexibility on the core graph structure. First, DGL
now supports creating graphs stored in int32; it not only cuts the memory
consumption by half compared with int64, but also enables many fast operators
only available for int32 provided by cuSPARSE. Second, previous DGL only
provides APIs to control the host device of node/edge features,  while in the new
version, it allows changing the host device of the graph structure too (via
&lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph.to&lt;/code&gt;). DGL has implemented many structure-related operators such as
getting degrees, extracting subgraphs on CUDA. Third, to store giant graphs even
more compactly, DGL adds the &lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph.formats&lt;/code&gt; API to control the internal
sparse formats of graphs. This could reduce the memory
consumption by half or more especially for storing the graph for sampling
in mini-batch training. You can find the explanations of all these new features in
the dedicated &lt;a href=&quot;https://docs.dgl.ai/guide/graph.html&quot;&gt;user guide chapter&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;faster-and-deterministic-kernels&quot;&gt;Faster and deterministic kernels&lt;/h2&gt;

&lt;p&gt;Alongside the usability improvement, the DGL team always keeps system
performance at heart. We have conducted an extensive code refactoring during
this release to reduce the Python stack overhead and enhance the code
readability. In addition, we upgrade the core CPU/GPU kernels for message
passing computation. Specifically, we found that the message passing in GNNs
can be reduced to two general computational patterns: g-SpMM and g-SDDMM. The
two patterns have a number of choices of parallelization and DGL carefully
chooses the suitable ones based on the sparse format and operator type.
Moreover, DGL by default chooses deterministic implementations for a better
reproducibility. Read the updated &lt;a href=&quot;https://arxiv.org/abs/1909.01315&quot;&gt;white paper&lt;/a&gt;
for more details about the new kernel design.&lt;/p&gt;

&lt;h2 id=&quot;scaling-beyond-one-machine&quot;&gt;Scaling beyond one machine&lt;/h2&gt;

&lt;p&gt;&lt;em&gt;Can DGL scale to giant graphs that cannot be fit in one machine?&lt;/em&gt; This question
has been on our watch from the genesis of the DGL project. Despite several
attempts from the previous releases, 0.5 is the very first release that
thoroughly defines the user-facing APIs and components for distributed
training. The goal is to create a coherent user experience of mini-batch
training from on a single machine to multiple machines, ideally with few or no
code changes. Specifically, this release includes the following new components:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;To split a graph for distributed computation, DGL integrates a light-weight
version of the highly-optimized METIS &lt;em&gt;*graph partition&lt;/em&gt; toolkit.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;DistGraphServer&lt;/strong&gt; stores the partitioned graph structure and node/edge
features on each machine. These servers work together to serve the graph data
to training processes. One can deploy multiple servers on one machine to boost
the service throughput.&lt;/li&gt;
  &lt;li&gt;New &lt;strong&gt;distributed sampler&lt;/strong&gt; that interacts with remote servers and supports
sampling from partitioned graph.&lt;/li&gt;
  &lt;li&gt;For training processes, DGL provides the &lt;strong&gt;DistGraph&lt;/strong&gt;, &lt;strong&gt;DistTensor&lt;/strong&gt; and
&lt;strong&gt;DistEmbedding&lt;/strong&gt; abstractions for accessing graph structures, node/edge
features and embeddings stored remotely. There is also a convenient
&lt;strong&gt;DistDataLoader&lt;/strong&gt; to get mini-batches from the distributed sampler.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DGL has performed several optimizations within the entire stack. For example,
when the sampler and target server are located in the same machine, they can
communicate with each other through the local shared-memory, instead of using
IPC or TCP/IP communication. More optimizations are coming in the future
releases. To get started, check out the &lt;a href=&quot;https://docs.dgl.ai/guide/distributed.html&quot;&gt;user guide chapter&lt;/a&gt; for distributed
training and examples for training &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/graphsage/experimental&quot;&gt;GraphSAGE&lt;/a&gt;
and &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/rgcn/experimental&quot;&gt;RGCN&lt;/a&gt;
on the ogbn-paper100M dataset.&lt;/p&gt;

&lt;h2 id=&quot;further-readings&quot;&gt;Further readings&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Our updated white paper available at: &lt;a href=&quot;https://arxiv.org/abs/1909.01315&quot;&gt;https://arxiv.org/abs/1909.01315&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Release note: &lt;a href=&quot;https://github.com/dmlc/dgl/releases/tag/0.5.0&quot;&gt;https://github.com/dmlc/dgl/releases/tag/0.5.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>DGLTeam</name></author><category term="release" /><category term="release" /><summary type="html">The recent DGL 0.5 release is a major update on many aspects of the project including documentation, APIs, system speed and scalability. This article highlights some of the new features and enhancements.</summary></entry><entry><title type="html">Fighting COVID-19 with Deep Graph</title><link href="https://www.dgl.ai/news/2020/06/09/covid.html" rel="alternate" type="text/html" title="Fighting COVID-19 with Deep Graph" /><published>2020-06-09T00:00:00+00:00</published><updated>2020-06-09T00:00:00+00:00</updated><id>https://www.dgl.ai/news/2020/06/09/covid</id><content type="html" xml:base="https://www.dgl.ai/news/2020/06/09/covid.html">&lt;p&gt;Since December 2019, the rapid spread of COVID-19 corona-viruses worldwide has
caused more than 7 million infections and more than 400,000 deaths. The rapid
spread of COVID-19 demonstrates the dire need for quick and effective drug
discovery. Drug repurposing is a drug discovery paradigm that uses existing
drugs for new therapeutic indications. It has the advantages of significantly
reducing time and cost relative to de novo drug discovery. Drug repurposing
with knowledge graphs presents a promising strategy for COVID-19 treatment.&lt;/p&gt;

&lt;p&gt;A team of AWS scientists from Amazon Shanghai AI Lab and AWS Deep Engine
Science team working along with academic collaborators from the University of
Minnesota, The Ohio State University, and Hunan University have created the
&lt;strong&gt;Drug Repurposing Knowledge Graph (DRKG)&lt;/strong&gt; and a set of machine learning tools
that can be used to prioritize drugs for repurposing studies. DRKG and the ML
tools are open sourced in github to help researchers conduct drug relocation
research on COVID-19 and other diseases (such as Alzheimer’s disease).&lt;/p&gt;

&lt;p&gt;DRKG is a comprehensive biological knowledge graph that relates human genes,
compounds, biological processes, drug side effects, diseases and symptoms. DRKG
includes, curates, and normalizes information from six publicly available
databases and data that were collected from recent publications related to
Covid-19. It has 97,238 entities belonging to 13 types of entities, and
5,874,261 triplets belonging to 107 types of relations.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2020-06-09-drkg/drkg.png&quot; alt=&quot;drkg&quot; width=&quot;800x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;
&lt;p&gt;
&lt;center&gt;
&lt;i&gt;The high-level structure of DRKG. Numerals indicate the number of different
types of relationships between classes of entities; terms between parentheses
are examples of those relationships.&lt;/i&gt;
&lt;/center&gt;
&lt;/p&gt;

&lt;p&gt;The machine learning tools use DGL-KE to learn low dimension embedding
representations of entities and relations in DRKG. The resulting embeddings are
used to predict how likely a drug can treat a disease or how likely a drug can
bind to a protein associated with the disease. &lt;a href=&quot;https://github.com/awslabs/dgl-ke&quot;&gt;DGL-KE&lt;/a&gt; is a high performance,
easy-to-use, and scalable package for learning large-scale knowledge graph
embeddings developed by Amazon Shanghai AI Lab. The package is implemented on
the top of Deep Graph Library (DGL) and developers can run DGL-KE on CPU
machine, GPU machine, as well as clusters with a set of popular models,
including TransE, DistMult, ComplEx, RotatE and etc. It can train a knowledge
graph consisting of over &lt;em&gt;86M&lt;/em&gt; nodes and &lt;em&gt;338M&lt;/em&gt; edges in 100 minutes on an EC2
instance with 8 GPUs and 30 minutes on an EC2 cluster with 4 machines.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/images/posts/2020-06-09-drkg/dgl-ke.png&quot; alt=&quot;dglke&quot; width=&quot;400x&quot; class=&quot;aligncenter&quot; /&gt;&lt;/p&gt;

&lt;p&gt;DRKG github repository provides examples on using DGL-KE to &lt;a href=&quot;https://github.com/gnn4dr/DRKG/blob/master/embedding_analysis/Train_embeddings.ipynb&quot;&gt;learn low
dimension embedding representations of entities and relations in
DRKG&lt;/a&gt;
and using pre-trained knowledge graph embedding of DRKG to do &lt;a href=&quot;https://github.com/gnn4dr/DRKG/blob/master/drug_repurpose/COVID-19_drug_repurposing.ipynb&quot;&gt;drug
repurposing&lt;/a&gt;.
Preliminary experimental results show that using certain machine learning tools
for COVID-19 drug discovery can identify a variety of drugs currently in
clinical trials with high ranking scores.&lt;/p&gt;

&lt;h2 id=&quot;use-dgl-ke-to-learn-low-dimension-embedding-representations-of-entities-and-relations-in-drkg&quot;&gt;Use DGL-KE to Learn Low Dimension Embedding Representations of Entities and Relations in DRKG&lt;/h2&gt;

&lt;p&gt;DRKG uses DGL-KE to learn knowledge graph embedding&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 1:&lt;/em&gt; Downloading DRKG from &lt;a href=&quot;https://dgl-data.s3-us-west-2.amazonaws.com/dataset/DRKG/drkg.tar.gz&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 2:&lt;/em&gt; Load DRKG as follows.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;sys&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;sys&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'../utils'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;utils&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;download_and_extract&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;download_and_extract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;drkg_file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'../data/drkg/drkg.tsv'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 3:&lt;/em&gt; DRKG data package has a drkg.tsv file containing all triplets in the
knowledge graph. Before training, We randomly divide the data set into training
set, validation set and test set according to the ratio of 0.9:0.05:0.05.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pandas&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pd&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;numpy&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;np&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;df&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_csv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drkg_file&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;df&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arange&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;shuffle&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;train_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_triples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.9&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;valid_cnt&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;num_triples&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.05&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;train_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;valid_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;test_set&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seed&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;train_cnt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;valid_cnt&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tolist&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;train/drkg_train.tsv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;train_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writelines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
      
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;train/drkg_valid.tsv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;valid_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writelines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;train/drkg_test.tsv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'w+'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;test_set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;writelines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;{}&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;triples&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]))&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 4:&lt;/em&gt; Then we directly invoke the command line toolkit provided by DGL-KE
to learn low dimension embedding representations of entities and relations in
DRKG. Here we choose the &lt;code class=&quot;highlighter-rouge&quot;&gt;TransE_l2&lt;/code&gt; model and use an AWS p3.16xlarge instance to
train the model with multi-GPU in parallel. To use other KGE model or AWS
instances please refer to DGL-KE’s &lt;a href=&quot;https://aws-dglke.readthedocs.io/en/latest/index.html&quot;&gt;documentation&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;DGLBACKEND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;pytorch dglke_train --dataset DRKG --data_path ./train &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                               --data_files drkg_train.tsv drkg_valid.tsv drkg_test.tsv &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                               --format &lt;span class=&quot;s1&quot;&gt;'raw_udd_hrt'&lt;/span&gt; --model_name TransE_l2 --batch_size 2048 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                               --neg_sample_size 256 --hidden_dim 400 --gamma 12.0 --lr 0.1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                               --max_step 100000 --log_interval 1000 --batch_size_eval 16 -adv &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                               --regularization_coef 1.00E-07 --test --num_thread 1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                               --gpu 0 1 2 3 4 5 6 7 --num_proc 8 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
                               --neg_sample_size_eval 10000 --async_update
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 5:&lt;/em&gt; After training, two files are generated: 1)
&lt;code class=&quot;highlighter-rouge&quot;&gt;DRKG_TransE_l2_entity.npy&lt;/code&gt;, containing the low dimension embedding
representations of entities in DRKG and 2) &lt;code class=&quot;highlighter-rouge&quot;&gt;DRKG_TransE_l2_relation.npy&lt;/code&gt;,
containing the low dimension embeddings representations of relations in DRKG.
These embeddings can be used in drug repurposing tasks.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;node_emb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./ckpts/TransE_l2_DRKG_0/DRKG_TransE_l2_entity.npy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;relation_emb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'./ckpts/TransE_l2_DRKG_0/DRKG_TransE_l2_relation.npy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The complete example code can be found &lt;a href=&quot;https://github.com/gnn4dr/DRKG/blob/master/embedding_analysis/Train_embeddings.ipynb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Use Pre-trained Knowledge Graph Embedding for Repurposing Drugs for COVID-19
— A collaboration work from Amazon AWS AI, Hunan University, Cleveland Clinic
Lerner Center for Genomic Medicine, and University of Minnesota (Repurpose Open
Data to Discover Therapeutics for COVID-19 using Deep Learning) proposed a new
drug repurposing methodology for COVID-19 using the combination of knowledge
graph embedding and gene-set enrichment analysis method. DRKG borrows the
similar idea and provides pre-trained knowledge graph embedding of DRKG for
drug repurposing for COVID-19.&lt;/p&gt;

&lt;p&gt;First of all, we define the task of finding drugs for COVID-19 using DRKG
knowledge graph as a task of predicting the possible connections between
candidate drug entities and the COVID-19 related disease entities under the
relation of &lt;code class=&quot;highlighter-rouge&quot;&gt;'Hetionet::CtD::Compound:Disease'&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;'GNBR::T::Compound:Disease'&lt;/code&gt;,
i.e. the treatment relationship. We select FDA approved drugs with molecular
weight larger than 250 from DRKG as drug candidates and use 34 COVID-19 virus
related entities in DRKG as target entities. Then we predict the connection
scores of all possible triplets (Drug, Treatment, Virus) under the &lt;code class=&quot;highlighter-rouge&quot;&gt;TransE_L2&lt;/code&gt;
algorithm and sort the scores. Finally, we choose the top100 highest confident
connections and take the corresponding drugs as repurposed drugs. The detailed
steps are as following:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Step 1:&lt;/em&gt; Setting target virus entities, drug entities and treatment relations.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# COVID-19 related virus entities&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;COV_disease_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Disease::SARS-CoV2 E'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Disease::SARS-CoV2 M'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# treatment relations&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;treatment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Hetionet::CtD::Compound:Disease'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'GNBR::T::Compound:Disease'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# candidate drugs（provided in infer_drug.tsv along with the whole DRKG dataset)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;drug_list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;with&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;./infer_drug.tsv&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;newline&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;''&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;encoding&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'utf-8'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csvfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;csv&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;DictReader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;csvfile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delimiter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\t&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fieldnames&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'drug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ids'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;row_val&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reader&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;drug_list&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;row_val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'drug'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 2:&lt;/em&gt; Get the pretrained DRKG knowledge graph embedding.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;# Reading pretrained embeddings&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;entity_emb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'../data/drkg/embed/DRKG_TransE_l2_entity.npy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;rel_emb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'../data/drkg/embed/DRKG_TransE_l2_relation.npy'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;drug_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drug_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;disease_ids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disease_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;long&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;treatment_rid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;treatment_rid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;drug_emb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;entity_emb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drug_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;treatment_embs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tensor&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rel_emb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rid&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;treatment_rid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 3:&lt;/em&gt; Predict the connection scores of all possible triplets (Drug, Treatment, Virus) under the &lt;code class=&quot;highlighter-rouge&quot;&gt;TransE_L2&lt;/code&gt; algorithm，the formula is as following:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{d} = \gamma - ||\mathbf{h} + \mathbf{r} - \mathbf{t}||_2&lt;/script&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;\mathbf{score} = \log\left(\frac{1}{1+e^{-\mathbf{d}}}\right)&lt;/script&gt;

&lt;p&gt;, where &lt;script type=&quot;math/tex&quot;&gt;\mathbf{h}&lt;/script&gt; is for head (i.e., drugs), &lt;script type=&quot;math/tex&quot;&gt;\mathbf{r}&lt;/script&gt; for relation, &lt;script type=&quot;math/tex&quot;&gt;\mathbf{t}&lt;/script&gt; for tail
(i.e., virus) and &lt;script type=&quot;math/tex&quot;&gt;\gamma&lt;/script&gt; is the constant value used in training.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;torch.nn.functional&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;fn&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;12.0&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;transE_l2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;gamma&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;norm&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dim&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;scores_per_disease&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# predict the connection scores of (Drug, Treatment, Virus) triplets &lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# for each treatment type and combine them together.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rid&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;treatment_embs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)):&lt;/span&gt;
   &lt;span class=&quot;n&quot;&gt;treatment_emb&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;treatment_embs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disease_id&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disease_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;disease_emb&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;entity_emb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disease_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;score&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;logsigmoid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;transE_l2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drug_emb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;treatment_emb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disease_emb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;scores_per_disease&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;score&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;dids&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;drug_ids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scores_per_disease&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 4:&lt;/em&gt; Sort the scores.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;th&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;argsort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dims&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;dids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;idx&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;numpy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 5:&lt;/em&gt; Get the top-100 repurposed drugs.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;topk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;unique_indices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;return_index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;topk_indices&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;np&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unique_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topk&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# top-100 drug Ids&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proposed_dids&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topk_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# top-100 drug scores&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;proposed_scores&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scores&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topk_indices&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Step 6:&lt;/em&gt; Six drugs in clinical trials appears in the top100 repurposed drugs. Their ranking and score is as following:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[0]    Ribavirin          -0.21416784822940826
[4]    Dexamethasone      -0.9984006881713867
[8]    Colchicine         -1.080674648284912
[16]   Methylprednisolone -1.1618402004241943
[49]   Oseltamivir        -1.3885014057159424
[87]   Deferoxamine       -1.513066053390503
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The complete example code can be found &lt;a href=&quot;https://github.com/gnn4dr/DRKG/blob/master/drug_repurpose/COVID-19_drug_repurposing.ipynb&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;further-read&quot;&gt;Further read&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Check out the &lt;a href=&quot;https://github.com/gnn4dr/DRKG&quot;&gt;DRKG repository&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;Check out the &lt;a href=&quot;https://www.amazon.science/blog/amazon-web-services-open-sources-biological-knowledge-graph-to-fight-covid-19&quot;&gt;announcement&lt;/a&gt; on Amazon Science.&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://zhuanlan.zhihu.com/p/147329945&quot;&gt;Blog in chinese&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;</content><author><name>DGLTeam</name></author><category term="news" /><category term="news" /><summary type="html">Since December 2019, the rapid spread of COVID-19 corona-viruses worldwide has caused more than 7 million infections and more than 400,000 deaths. The rapid spread of COVID-19 demonstrates the dire need for quick and effective drug discovery. Drug repurposing is a drug discovery paradigm that uses existing drugs for new therapeutic indications. It has the advantages of significantly reducing time and cost relative to de novo drug discovery. Drug repurposing with knowledge graphs presents a promising strategy for COVID-19 treatment.</summary></entry><entry><title type="html">Learning Graph Neural Networks with DGL – The WebConf 2020 Tutorial</title><link href="https://www.dgl.ai/news/2020/05/24/webconf.html" rel="alternate" type="text/html" title="Learning Graph Neural Networks with DGL -- The WebConf 2020 Tutorial" /><published>2020-05-24T00:00:00+00:00</published><updated>2020-05-24T00:00:00+00:00</updated><id>https://www.dgl.ai/news/2020/05/24/webconf</id><content type="html" xml:base="https://www.dgl.ai/news/2020/05/24/webconf.html">&lt;p&gt;In the last few years, graph neural networks (GNNs) have emerged as a promising
new supervised learning framework capable of bringing the power of deep
representation learning to graph and relational data.&lt;/p&gt;

&lt;p&gt;During &lt;a href=&quot;https://www.amazon.science/conferences-and-events/the-web-conference-2020&quot;&gt;The Web Conference&lt;/a&gt; in April, AWS deep learning scientists and engineers
George Karypis, Zheng Zhang, Minjie Wang, Da Zheng, and Quan Gan presented a
&lt;a href=&quot;https://github.com/dglai/WWW20-Hands-on-Tutorial&quot;&gt;tutorial&lt;/a&gt; on GNNs.&lt;/p&gt;

&lt;p&gt;The tutorial offers an overview of how learning GNNs can be used to solve
problems such as detecting fraud and abuse (e.g., malicious accounts,
fraudulent financial transactions, fake reviews), supporting customer
recommendations (e.g., suggesting relevant products, jobs, articles, etc.), and
delivering marketing campaigns (e.g., targeting who should get a discount,
identifying influencers).&lt;/p&gt;

&lt;p&gt;Watch the video presentation to learn more about putting GNNs to use in
learning applications, and get an introduction and training on the AWS Deep
Graph Library, a new software framework that simplifies the development of
efficient GNN-based training and inference programs.&lt;/p&gt;

&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/bD6S3xUXNds&quot; frameborder=&quot;0&quot; allow=&quot;accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;Tutorial sections:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Overview of graph neural networks&lt;/li&gt;
  &lt;li&gt;Overview of Deep Graph Library (DGL)&lt;/li&gt;
  &lt;li&gt;GNN models for basic graph tasks&lt;/li&gt;
  &lt;li&gt;GNN training on large graphs&lt;/li&gt;
  &lt;li&gt;GNN models for real-world applications&lt;/li&gt;
&lt;/ol&gt;</content><author><name>DGLTeam</name></author><category term="news" /><category term="news" /><summary type="html">In the last few years, graph neural networks (GNNs) have emerged as a promising new supervised learning framework capable of bringing the power of deep representation learning to graph and relational data.</summary></entry><entry><title type="html">What is new in DGL v0.4.3 release?</title><link href="https://www.dgl.ai/release/2020/04/01/release.html" rel="alternate" type="text/html" title="What is new in DGL v0.4.3 release?" /><published>2020-04-01T00:00:00+00:00</published><updated>2020-04-01T00:00:00+00:00</updated><id>https://www.dgl.ai/release/2020/04/01/release</id><content type="html" xml:base="https://www.dgl.ai/release/2020/04/01/release.html">&lt;p&gt;The DGL v0.4.3 release brings many new features for an enhanced usability and
system efficiency. The article takes a peek at some of the major highlights.&lt;/p&gt;

&lt;h2 id=&quot;tensorflow-support&quot;&gt;TensorFlow support&lt;/h2&gt;

&lt;p&gt;DGL finally comes to the TensorFlow community starting from this release.
Switching to TensorFlow is easy. If you are a first-time user, please install
DGL and &lt;code class=&quot;highlighter-rouge&quot;&gt;import dgl&lt;/code&gt;, and then follow the instructions to set the default
backend. You can always switch back by changing the &lt;code class=&quot;highlighter-rouge&quot;&gt;config.json&lt;/code&gt; file, which is
under &lt;code class=&quot;highlighter-rouge&quot;&gt;~/.dgl&lt;/code&gt; folder. DGL keeps a coherent user experience regardless of which
backend is currently in use. The following code demonstrates the basic steps to
apply a graph convolution layer.&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tensorflow&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;tf&lt;/span&gt;
&lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dgl.nn&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;dglnn&lt;/span&gt;

&lt;span class=&quot;c&quot;&gt;# Random features for 10 nodes; each is of length 5.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;random&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;normal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Random graph; 10 nodes and 20 edges.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rand_graph&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c&quot;&gt;# Pre-defined graph convolution module.&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dglnn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GraphConv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# Apply the graph convolution layer.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;We have implemented and released 15 common GNN modules in TensorFlow (more are
coming), all of which can be invoked in one line of codes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GraphConv&lt;/code&gt; from the &lt;a href=&quot;https://arxiv.org/abs/1609.02907&quot;&gt;Graph Convolutional Networks&lt;/a&gt; paper.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GATConv&lt;/code&gt; from the &lt;a href=&quot;https://arxiv.org/pdf/1710.10903.pdf&quot;&gt;Graph Attention Networks&lt;/a&gt; paper.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SAGEConv&lt;/code&gt; from the &lt;a href=&quot;https://arxiv.org/pdf/1706.02216.pdf&quot;&gt;Inductive Representation Learning on Large Graphs&lt;/a&gt; paper (a.k.a. GraphSAGE).&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;GINConv&lt;/code&gt; from the &lt;a href=&quot;https://arxiv.org/pdf/1810.00826.pdf&quot;&gt;How Powerful are Graph Neural Networks&lt;/a&gt; paper.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;RelGraphConv&lt;/code&gt; from the &lt;a href=&quot;https://arxiv.org/abs/1703.06103&quot;&gt;Modeling Relational Data with Graph Convolutional Networks&lt;/a&gt; paper.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;SGConv&lt;/code&gt; from the &lt;a href=&quot;https://arxiv.org/pdf/1902.07153.pdf&quot;&gt;Simplifying Graph Convolutional Networks&lt;/a&gt; paper.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;APPNPConv&lt;/code&gt; from the &lt;a href=&quot;https://arxiv.org/pdf/1810.05997.pdf&quot;&gt;Predict then Propagate: Graph Neural Networks meet Personalized PageRank&lt;/a&gt; paper.&lt;/li&gt;
  &lt;li&gt;An &lt;code class=&quot;highlighter-rouge&quot;&gt;edge_softmax&lt;/code&gt; function for computing softmax over the neighboring edges of each vertex.&lt;/li&gt;
  &lt;li&gt;Various pooling layers: &lt;code class=&quot;highlighter-rouge&quot;&gt;SumPooling&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;AvgPooling&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;MaxPooling&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;SortPooling&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;WeightAndSum&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;GlobalAttentionPooling&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;HeteroGraphConv&lt;/code&gt; module for applying GNN modules to heterogeneous graphs.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our preliminary benchmark shows strong performance improvement against other
TF-based tools for GNNs in terms of both training speed (measured by epoch
running time in seconds) and memory consumption.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Dateset&lt;/th&gt;
      &lt;th&gt;Model&lt;/th&gt;
      &lt;th&gt;DGL&lt;/th&gt;
      &lt;th&gt;GraphNet&lt;/th&gt;
      &lt;th&gt;tf_geometric&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Core&lt;/td&gt;
      &lt;td&gt;GCN&lt;/td&gt;
      &lt;td&gt;0.0148&lt;/td&gt;
      &lt;td&gt;0.0152&lt;/td&gt;
      &lt;td&gt;0.0192&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Reddit&lt;/td&gt;
      &lt;td&gt;GCN&lt;/td&gt;
      &lt;td&gt;0.1095&lt;/td&gt;
      &lt;td&gt;OOM&lt;/td&gt;
      &lt;td&gt;OOM&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PubMed&lt;/td&gt;
      &lt;td&gt;GCN&lt;/td&gt;
      &lt;td&gt;0.0156&lt;/td&gt;
      &lt;td&gt;0.0553&lt;/td&gt;
      &lt;td&gt;0.0185&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PPI&lt;/td&gt;
      &lt;td&gt;GCN&lt;/td&gt;
      &lt;td&gt;0.09&lt;/td&gt;
      &lt;td&gt;0.16&lt;/td&gt;
      &lt;td&gt;0.21&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;Cora&lt;/td&gt;
      &lt;td&gt;GAT&lt;/td&gt;
      &lt;td&gt;0.0442&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;0.058&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;PPI&lt;/td&gt;
      &lt;td&gt;GAT&lt;/td&gt;
      &lt;td&gt;0.398&lt;/td&gt;
      &lt;td&gt;n/a&lt;/td&gt;
      &lt;td&gt;0.752&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To get started, install &lt;a href=&quot;https://www.dgl.ai/pages/start.html&quot;&gt;DGL&lt;/a&gt; and check out the examples &lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/tensorflow&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;dgl-ke-a-light-speed-package-for-learning-knowledge-graph-embeddings&quot;&gt;DGL-KE: A light-speed package for learning knowledge graph embeddings&lt;/h2&gt;
&lt;p&gt;Previously incubated under the DGL main repository, DGL-KE now officially
announces its 0.1 release as a standalone package. The key highlights are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Effortlessly generate knowledge graph embedding with one line of code.&lt;/li&gt;
  &lt;li&gt;Support for giant graphs with millions of nodes and edges.&lt;/li&gt;
  &lt;li&gt;Distributed training with highly-optimized graph partitioning, negative
sampling and communication, which can be deployed on both multi-GPU machines
and multi-machine clusters.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DGL-KE can be installed with pip:&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install dglke
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The following command trains embeddings of the full FreeBase graph (over 86M nodes
and 338M edges) with 8 GPUs.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;dglke_train --model TransE_l2 --dataset Freebase --batch_size 1000 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            --neg_sample_size 200 --hidden_dim 400 --gamma 10 --lr 0.1 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            --regularization_coef 1e-9 -adv --gpu 0 1 2 3 4 5 6 7 &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            --max_step 320000 --log_interval 10000 --async_update &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
            --rel_part --force_sync_interval 10000
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;DGL-KE is designed for learning at scale and speed. Our benchmark on the full
FreeBase graph shows that DGL-KE can train
embeddings under 100 minutes on an 8-GPU machine and under 30 minutes on a 4-machine
cluster (48 cores/machine). These results represent a 2×∼5× speedup over the
best competing approaches.&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;&lt;center&gt;DGL-KE v.s. PyTorch-BigGraph on FreeBase&lt;/center&gt;&lt;/th&gt;
      &lt;th&gt;&lt;center&gt;DGL-KE v.s. GraphVite on FB15k&lt;/center&gt;&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;&lt;img src=&quot;https://github.com/awslabs/dgl-ke/raw/master/img/vs-pbg-fb.png&quot; alt=&quot;&quot; width=&quot;600x&quot; /&gt;&lt;/td&gt;
      &lt;td&gt;&lt;img src=&quot;https://github.com/awslabs/dgl-ke/raw/master/img/vs-gv-fb15k.png&quot; alt=&quot;&quot; width=&quot;600x&quot; /&gt;&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;Check out our new GitHub repository, examples and documentations under
&lt;a href=&quot;https://github.com/awslabs/dgl-ke&quot;&gt;https://github.com/awslabs/dgl-ke&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;dgl-lifesci-bringing-graph-neural-networks-to-chemistry-and-biology&quot;&gt;DGL-LifeSci: Bringing Graph Neural Networks to Chemistry and Biology&lt;/h2&gt;

&lt;p&gt;Previously incubated as a model zoo for chemistry, DGL-LifeSci is now spun off
as a standalone package. The key highlights are:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Training scripts and pre-trained models for various applications — molecular
property prediction, generative models, and reaction prediction.&lt;/li&gt;
  &lt;li&gt;Up to 5.5x model training speedup compared to previous implementations.&lt;/li&gt;
  &lt;li&gt;Well defined pipelines for data processing, model construction and
evaluation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;DGL-LifeSci can be installed with pip or conda.&lt;/p&gt;

&lt;div class=&quot;language-bash highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;pip install dgllife
conda install -c dglteam dgllife
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A summary of speedup in seconds per epoch of training:&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;Model&lt;/th&gt;
      &lt;th&gt;Original Implementations&lt;/th&gt;
      &lt;th&gt;DGL-LifeSci Implementations&lt;/th&gt;
      &lt;th&gt;Speedup&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;GCN on Tox21&lt;/td&gt;
      &lt;td&gt;5.5 (DeepChem)&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;5.5x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;AttentiveFP on Aromaticity&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;1.2&lt;/td&gt;
      &lt;td&gt;5x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;JTNN on ZINC&lt;/td&gt;
      &lt;td&gt;1826&lt;/td&gt;
      &lt;td&gt;743&lt;/td&gt;
      &lt;td&gt;2.5x&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;WLN for reaction center prediction&lt;/td&gt;
      &lt;td&gt;11657&lt;/td&gt;
      &lt;td&gt;5095&lt;/td&gt;
      &lt;td&gt;2.3x&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;To get started, check out the examples and documentations under
&lt;a href=&quot;https://github.com/awslabs/dgl-lifesci&quot;&gt;https://github.com/awslabs/dgl-lifesci&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;experimenting-new-apis-for-sampling&quot;&gt;Experimenting new APIs for sampling&lt;/h2&gt;

&lt;p&gt;Sampling is crucial to training GNNs on giant graphs. In this release, we
re-design the APIs for sampling, aiming for a more intuitive programming
experience and a better performance at the same time. The new APIs have several
advantages:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Support a wide range of sampling-based GNN models, including PinSAGE,
GraphSAGE, Graph Convolutional Matrix Completion (GCMC), and etc.&lt;/li&gt;
  &lt;li&gt;Support customization in Python.&lt;/li&gt;
  &lt;li&gt;Support heterogeneous graphs.&lt;/li&gt;
  &lt;li&gt;Leverage all pre-defined NN modules with no code change.&lt;/li&gt;
  &lt;li&gt;Utilize both multi-processing and multi-threading for maximum speed.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The code below defines a basic neighbor sampler:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;NeighborSampler&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanouts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# The full graph structure&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fanouts&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanouts&lt;/span&gt;  &lt;span class=&quot;c&quot;&gt;# fan-out of each layer&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sample_blocks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c&quot;&gt;# `seeds` are the set of nodes to build one sample from.&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanout&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fanouts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# For each seed node, sample ``fanout`` neighbors.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;frontier&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sampling&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sample_neighbors&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;g&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fanout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;replace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Then we compact the frontier into a bipartite graph for message passing.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to_block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;frontier&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seeds&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
            &lt;span class=&quot;c&quot;&gt;# Obtain the seed nodes for next layer.&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;seeds&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;srcdata&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dgl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

            &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blocks&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Although these APIs are still experimental, you can find their usages in many
examples:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Train the GraphSAGE model by neighbor sampling and scale it to multiple GPUs
(&lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/graphsage&quot;&gt;link&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Train the Relational GCN model on heterogeneous graphs by sampling for both
node classification and link prediction (&lt;a href=&quot;https://github.com/dmlc/dgl/tree/master/examples/pytorch/rgcn-hetero&quot;&gt;link&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Train the PinSAGE model by random walk sampling for item recommendation (&lt;a href=&quot;https://github.com/dmlc/dgl/pull/1334&quot;&gt;link&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Train the GCMC model by sampling for MovieLens rating prediction (&lt;a href=&quot;https://github.com/dmlc/dgl/pull/1296&quot;&gt;link&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Implement the variance reduction technique for neighbor sampling (&lt;a href=&quot;https://github.com/dmlc/dgl/pull/1355&quot;&gt;link&lt;/a&gt;) proposed by &lt;a href=&quot;https://arxiv.org/abs/1710.10568&quot;&gt;Chen et al.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will continue polishing these APIs, and the corresponding documentations and
tutorials are coming.&lt;/p&gt;

&lt;h2 id=&quot;other-improvements&quot;&gt;Other Improvements&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;All GNN modules under &lt;code class=&quot;highlighter-rouge&quot;&gt;dgl.nn&lt;/code&gt; now support both homogeneous graph and bipartite graph.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;DGLHeteroGraph&lt;/code&gt; now has a faster pickling/unpickling implementation.&lt;/li&gt;
  &lt;li&gt;Add new APIs for saving and loading &lt;code class=&quot;highlighter-rouge&quot;&gt;DGLHeteroGraph&lt;/code&gt; from checkpoints.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;BatchedDGLGraph&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;DGLSubGraph&lt;/code&gt; classes have been merged to &lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;Constructing &lt;code class=&quot;highlighter-rouge&quot;&gt;DGLGraph&lt;/code&gt; no longer requires a &lt;code class=&quot;highlighter-rouge&quot;&gt;multigraph&lt;/code&gt; flag.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;More details can be found in the &lt;a href=&quot;https://github.com/dmlc/dgl/releases/tag/0.4.3&quot;&gt;full release note&lt;/a&gt;.&lt;/p&gt;</content><author><name>DGLTeam</name></author><category term="release" /><category term="release" /><summary type="html">The DGL v0.4.3 release brings many new features for an enhanced usability and system efficiency. The article takes a peek at some of the major highlights.</summary></entry></feed>